/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.raven.main;

import com.raven.bd.DatabaseConnector;
import com.raven.component.Item;
import com.raven.event.EventMenuSelected;
import com.raven.form.Form_1;
import com.raven.form.Form_2;
import com.raven.form.Form_3;
import com.raven.form.Form_4;
import com.raven.form.connexion;
import com.raven.form.Form_Home;
import com.raven.model.ModelItem;
import com.raven.swing.PanelItem;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author RAVEN
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private Form_Home home;
    private Form_1 form1;
    private Form_2 form2;
    private Form_3 form3;
    private Form_4 form4;
    private connexion cnx;

    public Main() {
        initComponents();

        setBackground(new Color(0, 0, 0, 0));
        home = new Form_Home(this);
        form1 = new Form_1(this);
        form2 = new Form_2();
        form3 = new Form_3();
        form4 = new Form_4();
        cnx = new connexion();

        menu.initMoving(Main.this);
        menu.addEventMenuSelected(new EventMenuSelected() {
            @Override
            public void selected(int index) {
                if (index == 0) {
                    setForm(home);
                } else if (index == 1) {
                    setForm(form1);
                } else if (index == 2) {
                    setForm(form2);
                } else if (index == 3) {
                    setForm(form3);
                } else if (index == 4) {
                    setForm(form4);
                } else if (index == 5) {
                    // Close the current window
                    dispose();
                    // Open connexion.java
                    connexion connexionWindow = new connexion();
                    connexionWindow.setVisible(true);
                }
            }
        });
        //  set when system open start with home form
        setForm(home);
        testData();
    }

    public void testData() {
        form1.clearPanel();
        String query = "SELECT * FROM caftan";
        try (Connection connection = DatabaseConnector.getConnection(); PreparedStatement statement = connection.prepareStatement(query); ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                int id = resultSet.getInt("item_id");
                String name = resultSet.getString("item_type");
                String description = resultSet.getString("description");
                int price = resultSet.getInt("price");
                String brand = resultSet.getString("characteristics");
                String avi = resultSet.getString("availability");
                Blob imageBlob = resultSet.getBlob("image");
                boolean dispo = true;
                if (avi != null) {
                    if (avi.equals("yes")) {
                        dispo = true;
                    } else {
                        dispo = false;
                    }
                }
                // Convert blob to byte array
                byte[] imageBytes = imageBlob.getBytes(1, (int) imageBlob.length());
                // Convert byte array to ImageIcon
                ImageIcon imageIcon = new ImageIcon(imageBytes);
                ModelItem item = new ModelItem(id, name, description, price, brand, imageIcon, dispo);
                form1.addItem(item);

                // Create an Item instance to display the item  
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    private void setForm(JComponent com) {
        mainPanel.removeAll();
        mainPanel.add(com);
        mainPanel.repaint();
        mainPanel.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBorder1 = new com.raven.swing.PanelBorder();
        menu = new com.raven.component.Menu();
        header2 = new com.raven.component.Header();
        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBorder1.setBackground(new java.awt.Color(242, 242, 242));

        header2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        mainPanel.setOpaque(false);
        mainPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(header2, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE)
                    .addGroup(panelBorder1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addComponent(header2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.raven.component.Header header2;
    private javax.swing.JPanel mainPanel;
    private com.raven.component.Menu menu;
    private com.raven.swing.PanelBorder panelBorder1;
    // End of variables declaration//GEN-END:variables
public void addItemToDatabase(String name, String description, int price, String brand, String variability, byte[] imageData) {
        // Validate inputs

        // SQL query to insert the item into the database
        String sql = "INSERT INTO caftan (item_type, description, price, characteristics, availability, image) VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection connection = DatabaseConnector.getConnection(); PreparedStatement statement = connection.prepareStatement(sql)) {
            // Set the parameters for the prepared statement
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setInt(3, price);
            statement.setString(4, brand);
            statement.setString(5, variability);
            statement.setBytes(6, imageData);

            // Execute the SQL statement
            statement.executeUpdate();
            home.refreshHomeFormData();
            JOptionPane.showMessageDialog(null, "Article ajouté avec succès.", "Succès", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erreur lors de l'ajout d'un élément à la base de données. Veuillez vérifier votre saisie.", "Erreur", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Log the exception for debugging
        }

    }

    public void updateItemInDatabase(int itemId, String name, String description, int price, String brand, String variability, byte[] imageData) {
        // SQL query to update the item in the database
        String sql = "UPDATE caftan SET item_type = ?, description = ?, price = ?, characteristics = ?, availability = ?, image = ? WHERE item_id = ?";

        try (Connection connection = DatabaseConnector.getConnection(); PreparedStatement statement = connection.prepareStatement(sql)) {
            // Set the parameters for the prepared statement
            statement.setString(1, name);
            statement.setString(2, description);
            statement.setInt(3, price);
            statement.setString(4, brand);
            statement.setString(5, variability);
            statement.setBytes(6, imageData);
            statement.setInt(7, itemId);

            // Execute the SQL statement
            statement.executeUpdate();
            home.refreshHomeFormData();

            // Optionally, you can show a success message
            JOptionPane.showMessageDialog(this, "Item updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            // Optionally, you can show an error message if the update fails
            JOptionPane.showMessageDialog(this, "Error updating item in database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void removeItemFromDatabase(int itemId) {
        // SQL query to delete the item from the database based on its ID
        String sql = "DELETE FROM caftan WHERE item_id = ?";

        try (Connection connection = DatabaseConnector.getConnection(); PreparedStatement statement = connection.prepareStatement(sql)) {
            // Set the ID parameter for the prepared statement
            statement.setInt(1, itemId);

            // Execute the SQL statement to delete the item
            statement.executeUpdate();
            home.refreshHomeFormData();
            // Optionally, you can show a message indicating successful deletion
            // JOptionPane.showMessageDialog(this, "Item deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            // Optionally, you can show an error message if deletion fails
            // JOptionPane.showMessageDialog(this, "Error deleting item from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void setFormdar(int i) {
        setForm(form2);
    }

}
